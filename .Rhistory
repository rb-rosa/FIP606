leaflet() |>
addTiles() |>
#addMarkers()
addCircles()
lat = -20.7474
long = -42.883
dat <- data.frame(lat, long)
library(leaflet)
dat |>
leaflet() |>
addTiles() |>
#addMarkers()
addCircles()
lat = -20.7474
long = -42.883
dat <- data.frame(lat, long)
library(leaflet)
dat |>
leaflet() |>
addTiles() |>
#addMarkers() #tipo de ponto no mapa
addCircleMarkers() #tipo de ponto no mapa
lat = -20.7474
long = -42.883
dat <- data.frame(lat, long)
library(leaflet)
dat |>
leaflet() |>
addTiles() |>
addMarkers() #tipo de ponto no mapa
#addCircleMarkers() #tipo de ponto no mapa
lat = -20.7474
long = -42.883
dat <- data.frame(lat, long)
library(leaflet)
dat |>
leaflet() |>
addTiles() |>
addMarkers() #tipo de ponto no mapa
#addCircleMarkers() #tipo de ponto no mapa
#| echo: false # não mostra o código, só a saída
survey <- read_excel("dados-diversos.xlsx", "survey")
library(DT)
datatable(survey,
extensions = 'Buttons',
options = list(
dom = 'Bfrtip',
buttons = c('copy', 'excel')
))
cars
cars2 <- cars
speed <- cars2
library(remotes)
remotes::install_github("emdelponte/r4pde")
library("r4pde")
df <- RustSoybean
df
library(readxl)
magnesio <- read_excel("dados-diversos.xlsx")
escala1 <- read_excel("dados-diversos.xlsx", "escala")
escala2 <- read_excel("dados-diversos.xlsx", 2)
#| echo: false # não mostra o código, só a saída
survey <- read_excel("dados-diversos.xlsx", "survey")
library(DT)
datatable(survey,
extensions = 'Buttons',
options = list(
dom = 'Bfrtip',
buttons = c('copy', 'excel')
))
library(tidyverse)
magnesio2 <- read.csv("dados-diversos.csv")
magnesio3 <- read_csv("dados-diversos.csv")
magnesio4 <- read.table("dados-diversos.txt", sep = ',')
library(gsheet)
magnesio5 <- gsheet2tbl("https://docs.google.com/spreadsheets/d/1aID5Dh6PlBVCKzU1j7k-WA6zuWQWE2NhtWEgdJtt5iA/edit#gid=921203844")
survey <- gsheet2tbl("https://docs.google.com/spreadsheets/d/1aID5Dh6PlBVCKzU1j7k-WA6zuWQWE2NhtWEgdJtt5iA/edit#gid=366054269")
fusarium <- read_csv("https://raw.githubusercontent.com/emdelponte/epidemiology-R/main/data/fusarium_banana.csv")
dat |>
leaflet() |>
addProviderTiles(provider$Esri.WorldImagery) |>
#addTiles() |>
addMarkers()
lat = -20.7474
long = -42.883
dat <- data.frame(lat, long)
library(leaflet)
dat |>
leaflet() |>
addProviderTiles(provider$Esri.worldImagery) |>
addMarkers() #tipo de ponto no mapa
lat = -20.7474
long = -42.883
dat <- data.frame(lat, long)
library(leaflet)
dat |>
leaflet() |>
addProviderTiles(providers$Esri.worldImagery) |>
addMarkers() #tipo de ponto no mapa
#addTiles() |>
#addCircleMarkers() #ponto tipo círculo no mapa
lat = -20.7474
long = -42.883
dat <- data.frame(lat, long)
library(leaflet)
dat |>
leaflet() |>
addProviderTiles(providers$Esri.worldImagery) |>
addMarkers() #tipo de ponto no mapa
#addTiles() |>
#addCircleMarkers() #ponto tipo círculo no mapa
lat = -20.7474
long = -42.883
dat <- data.frame(lat, long)
library(leaflet)
dat |>
leaflet() |>
addProviderTiles(providers$Esri.WorldImagery) |>
addMarkers() #tipo de ponto no mapa
#addTiles() |>
#addCircleMarkers() #ponto tipo círculo no mapa
BRA <- ne_states(country = "Brazil",
returnclass = "sf")
MG <- BRA |> filter(name_en == "Minas Gerais")
m <- ggplot(BRA) +
geom_sf(color = "black",
fill = "white") +
geom_point(data = sbr, aes(longitude, latitude), alpha = 0.5)
m
library(plotly)
ggplotly(m)
BRA <- ne_states(country = "Brazil",
returnclass = "sf")
MG <- BRA |> filter(name_en == "Minas Gerais")
m <- ggplot(BRA) +
geom_sf(color = "black",
fill = "white") +
geom_point(data = sbr, aes(longitude, latitude), alpha = 0.5)
library(plotly)
ggplotly(m)
library(readxl)
library(tidyverse)
micelial <- read_excel("dados-diversos.xlsx", "micelial")
head (micelial)
micelial|>
ggplot(aes(especie, tcm)) +
geom_boxplot()
#Ajustar o modelo
# <- (atribuiu aov a aov1); ~ (em função de); aov (função ANOVA)
aov1 <- aov(tcm ~ especie, data = micelial)
summary(aov1)
#Não há efeito significativo de espécie P=0.117.
#Checar as premissas para verificar se o modelo está correto
library(performance)
check_heteroscedasticity(aov1)
#Resultado: OK. Error variance appears to be homoscedastic (p = 0.175). Significa que as variâncias são homogeneas.Se o p-valor for < 0.05 indica que os dados não são homogeneos.
check_normality(aov1)
#OK: residuals appear as normally distributed (p = 0.074). Significa que há normalidade. Se o p-valor for < 0.05 indica que os dados não apresentam normalidade.
library(DHARMa)
plot(simulateResiduals(aov1))
#Normalidade a direita e variância homogenea a esquerda
# teste de normalidade
hist(aov1$residuals)
qqnorm(aov1$residuals)
qqline(aov1$residuals)
shapiro.test(aov1$residuals)
# criando o objeto insects
insects <- tibble::as_tibble(InsectSprays) |>
dplyr::select(spray, count)
insects
insects|>
ggplot(aes(spray, count)) +
geom_boxplot()
aov1 <- aov(count ~ spray, data = insects)
summary(aov1)
library(performance)
check_heteroscedasticity(aov1)
#OK: Error variance appears to be homoscedastic (p = 0.175). Significa que as variâncias não são homogeneas, p < 0.05.
# nesse caso, recomenda-se transformar os dados para atender as premissas e então utilizar a ANOVA. Se as transformações não atenderem a homocedasticidade, utilizar teste não paramétrico.
# alternativa 1: transformar dados originais, se for números. Usar raiz quadrada ou logaritimo
# sqrt:  raiz quadrada
# log: logarítimo. se houver valor zero no "count" somar 0.5.
aov2 <- aov(sqrt(count) ~ spray, data = insects)
#aov2 <- aov(log(count+0.5) ~ spray, data = insects)
summary(aov2)
check_heteroscedasticity(aov2)
check_normality(aov2)
# atenteu as premissas
library(emmeans)
# médias por inseticida
# type = "response": para que a média não seja transformada, o inverso da raiz
aov2_means <- emmeans(aov2, ~ spray, type = "response")
aov2_means
# comparação entre pares
pwpm(aov2_means)
# com letras
library(multcomp)
library(multcompView)
cld(aov2_means)
# teste não paramétrico, se não atendeu as premissas da ANOVA mesmo com transformção dos dados.
kruskal.test(count ~ spray, data = insects)
library(agricolae)
kruskal(insects$count, insects$spray, console = TRUE)
glm1 <- glm(count ~ spray,
data = insects,
family = poisson(link = "identity"))
# poisson: adequado para dados de contagem. Muito utilizado para nematoide.
plot(simulateResiduals(glm1))
# catPred é o mais importante
summary(glm1)
glm1_means <- emmeans(glm1, ~ spray)
cld(glm1_means)
insects <- InsectSprays
library(ExpDes.pt)
insects$count2 <- sqrt(insects$count)
dic(insects$spray,
insects$count2,
mcomp = "tukey")
insects <- InsectSprays
library(ExpDes.pt)
insects$count2 <- sqrt(insects$count)
dic(insects$spray,
insects$count2,
mcomp = "sk")
data(ex5)
attach(ex5)
fat2.dbc(trat, genero, bloco, sabor, quali=c(TRUE,TRUE),
mcomp="sk", fac.names=c("Amostras","Genero"), sigT = 0.05,
sigF = 0.05, unfold=NULL)
insects <- InsectSprays
library(ExpDes.pt)
insects$count2 <- sqrt(insects$count) # sqrt é para transformar dados de contagem; insects$count2" é do R básico, poderia usar a função "mutate".
dic(insects$spray,
insects$count2,
mcomp = "tukey")
insects <- InsectSprays
library(ExpDes.pt)
insects$count2 <- sqrt(insects$count)
dic(insects$spray,
insects$count2,
mcomp = "sk")
BRA <- ne_states(country = "Brazil",
returnclass = "sf")
# Chunk 1
library(tidyverse)
library(readxl)
fungicida <- read_excel("dados-diversos.xlsx",
"fungicida_campo")
# Chunk 1
library(tidyverse)
library(readxl)
fungicida <- read_excel("dados-diversos.xlsx",
"fungicida_campo")
# Chunk 1
library(tidyverse)
library(readxl)
fungicida <- read_excel("dados-diversos.xlsx", "fungicida_campo")
# Chunk 1
library(tidyverse)
library(readxl)
fungicida <- read_excel("dados-diversos.xlsx", "fungicida_campo")
library(tidyverse)
library(readxl)
fungicida <- read_excel("dados-diversos.xlsx", "fungicida_campo")
fungicida <- read_excel("R_code/dados-diversos.xlsx", "fungicida_campo")
library(readxl)
library(remotes)
remotes::install_github("emdelponte/r4pde")
library(r4pde)
library(rnaturalearth)
library(rnaturalearthhires)
BRA <- ne_states:ne_states(country = "Brazil",
returnclass = "sf")
library(remotes)
remotes::install_github("emdelponte/r4pde")
library(r4pde)
library(rnaturalearth)
library(rnaturalearthhires)
BRA <- ne_states(country = "Brazil",
returnclass = "sf")
MG <- BRA |> filter(name_en == "Minas Gerais")
# Chunk 1
library(tidyverse)
library(readxl)
fungicida <- read_excel("dados-diversos.xlsx", "fungicida_campo")
library(tidyverse)
library(readxl)
fungicida <- read_excel("dados-diversos.xlsx", "fungicida_campo")
library(tidyverse)
library(readxl)
fungicida <- read_excel("dados-diversos.xlsx",
"fungicida_campo")
library(tidyverse)
library(readxl)
fungicida <- read_excel("dados-diversos.xlsx",
"fungicida_campo")
library(tidyverse)
library(readxl)
fungicida <- read_excel("dados-diversos.xlsx",
"fungicida_campo")
BRA <- ne_states(country = "Brazil",
returnclass = "sf")
# Chunk 1
library(tidyverse)
library(readxl)
library(ggplot2)
fungicida <- read_excel("dados-diversos.xlsx",
"fungicida_campo")
library(tidyverse)
library(readxl)
library(ggplot2)
remotes::install_github("ropensci/rnaturalearthhires")
fungicida <- read_excel("dados-diversos.xlsx",
"fungicida_campo")
library(tidyverse)
library(readxl)
library(ggplot2)
remotes::install_github("ropensci/rnaturalearthhires")
library(tidyverse)
library(readxl)
library(ggplot2)
library(remotes)
remotes::install_github("emdelponte/r4pde")
library(r4pde)
library(rnaturalearth)
library(rnaturalearthhires)
remotes::install_github("ropensci/rnaturalearthhires")
sbr <- RustSoybean
BRA <- ne_countries(country = "Brazil",
returnclass = "sf")
ggplot(BRA) +
geom_sf(fill = "white")
BRA <- ne_states(country = "Brazil",
returnclass = "sf")
ggplot(BRA) +
geom_sf(color = "white",
fill = "darkgreen") +
theme_void()
BRA <- ne_states(country = "Brazil",
returnclass = "sf")
MG <- BRA |> filter(name_en == "Minas Gerais")
ggplot(BRA) +
geom_sf(color = "black",
fill = "white") +
geom_sf(data = MG, color = "black",
fill = "green")
BRA <- ne_states(country = "Brazil",
returnclass = "sf")
MG <- BRA |> filter(name_en == "Minas Gerais")
ggplot(BRA) +
geom_sf(color = "black",
fill = "white") +
geom_point(data = sbr, aes(longitude, latitude), alpha = 0.5)
BRA <- ne_states(country = "Brazil",
returnclass = "sf")
MG <- BRA |> filter(name_en == "Minas Gerais")
m <- ggplot(BRA) +
geom_sf(color = "black",
fill = "white") +
geom_point(data = sbr, aes(longitude, latitude), alpha = 0.5)
library(plotly)
ggplotly(m)# passe o cursor por cima dos pontos no mapa
#O pacote leaflet cria um mapa interativo como Google Maps utilizando coordenadas geográficas
lat = -20.7474
long = -42.883
dat <- data.frame(lat, long)
library(leaflet)
dat |>
leaflet() |>
addProviderTiles(providers$Esri.WorldImagery) |>
addMarkers() #tipo de ponto no mapa
#addTiles() |>
#addCircleMarkers() #ponto tipo círculo no mapa
sbr2 <- sbr |>
separate(planting, into =
c("year", "month", "day"), sep = "-", remove = FALSE)
BRA <- ne_states(country = "Brazil",
returnclass = "sf")
MG <- BRA |> filter(name_en == "Minas Gerais")
ggplot(BRA) +
geom_sf(color = "black",
fill = "white") +
geom_point(data = sbr2,
aes(longitude, latitude, color = year), alpha = 0.5)+
facet_wrap(~year)+
theme_void()
library(ggspatial)
ggplot(BRA) +
annotation_north_arrow(location = "bl")+
annotation_scale(location = "br")+
geom_sf(color = "black",
fill = "white") +
geom_point(data = sbr2,
aes(longitude, latitude, color = year, size = severity), alpha = 0.5)+
labs(color = "Planting Year")+
theme_minimal()+
theme(legend.position = "right")
#library(rgdal)
#library(sf)
#shapefile <- st_read("Aula16_BR_Municipios_2022/BR_Municipios_2022.shp")
#ggplot(BRA) +
#geom_sf(data = shapefile)
shapefile <- sf::st_read("MG_Municipios_2022/MG_Municipios_2022.shp")
ggplot(MG) +
geom_sf(data = shapefile)
library(tidyverse)
library(readxl)
fungicida <- read_excel("dados-diversos.xlsx",
"fungicida_campo")
##| echo: false # não mostra o código, só a saída
survey <- read_excel("dados-diversos.xlsx", "survey")
library(DT)
datatable(survey,
extensions = 'Buttons',
options = list(
dom = 'Bfrtip',
buttons = c('copy', 'excel')
))
survey <- read_excel("dados-diversos.xlsx", "survey")
library(DT)
datatable(survey,
extensions = 'Buttons',
options = list(
dom = 'Bfrtip',
buttons = c('copy', 'excel')
))
survey <- read_excel("dados-diversos.xlsx", "survey")
library(DT)
datatable(survey,
extensions = 'Buttons',
options = list(
dom = 'Bfrtip',
buttons = c('copy', 'excel')
))
library(tidyverse)
library(readxl)
fungicida <- read_excel("dados-diversos.xlsx",
"fungicida_campo")
library(tidyverse)
library(readxl)
fungicida <- read_excel("dados-diversos.xlsx",
"fungicida_campo")
library(tidyverse)
library(readxl)
fungicida <- read_excel("dados-diversos.xlsx",
"fungicida_campo")
library(tidyverse)
library(readxl)
fungicida <- read_excel("dados-diversos.xlsx",
"fungicida_campo")
BRA <- ne_states(country = "Brazil",
returnclass = "sf")
MG <- BRA |> filter(name_en == "Minas Gerais")
m <- ggplot(BRA) +
geom_sf(color = "black",
fill = "white") +
geom_point(data = sbr, aes(longitude, latitude), alpha = 0.5)
sbr <- RustSoybean
BRA <- ne_states(country = "Brazil",
returnclass = "sf")
MG <- BRA |> filter(name_en == "Minas Gerais")
m <- ggplot(BRA) +
geom_sf(color = "black",
fill = "white") +
geom_point(data = sbr, aes(longitude, latitude), alpha = 0.5)
library(plotly)
ggplotly(m)# passe o cursor por cima dos pontos no mapa
#O pacote leaflet cria um mapa interativo como Google Maps utilizando coordenadas geográficas
lat = -20.7474
long = -42.883
dat <- data.frame(lat, long)
library(leaflet)
dat |>
leaflet() |>
addProviderTiles(providers$Esri.WorldImagery) |>
addMarkers() #tipo de ponto no mapa
#addTiles() |>
#addCircleMarkers() #ponto tipo círculo no mapa
sbr <- RustSoybean
BRA <- ne_states(country = "Brazil",
returnclass = "sf")
MG <- BRA |> filter(name_en == "Minas Gerais")
m <- ggplot(BRA) +
geom_sf(color = "black",
fill = "white") +
geom_point(data = sbr, aes(longitude, latitude), alpha = 0.5)
library(plotly)
ggplotly(m)# passe o cursor por cima dos pontos no mapa
library(rnaturalearth)
library(rnaturalearthhires)
sbr <- RustSoybean
BRA <- ne_states(country = "Brazil",
returnclass = "sf")
MG <- BRA |> filter(name_en == "Minas Gerais")
m <- ggplot(BRA) +
geom_sf(color = "black",
fill = "white") +
geom_point(data = sbr, aes(longitude, latitude), alpha = 0.5)
library(plotly)
ggplotly(m)# passe o cursor por cima dos pontos no mapa
remotes::install_github("emdelponte/r4pde")
library(r4pde)
sbr <- RustSoybean
BRA <- ne_states(country = "Brazil",
returnclass = "sf")
MG <- BRA |> filter(name_en == "Minas Gerais")
m <- ggplot(BRA) +
geom_sf(color = "black",
fill = "white") +
geom_point(data = sbr, aes(longitude, latitude), alpha = 0.5)
library(plotly)
ggplotly(m)# passe o cursor por cima dos pontos no mapa
