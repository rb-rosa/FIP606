select(Irrigation, severity) |>
filter(rep == 3) |>
ggplot(aes(day, severity, shape = Irrigation))+
geom_point(alpha = 0.5)+
geom_line()+
facet_wrap(~rep)
library(tidyverse)
mg <- read_csv("dados-diversos.csv")
mg |>
# filter(rep == 3) |>
ggplot(aes(day, severity, shape = Irrigation))+
geom_point(alpha = 0.5)+
geom_line()+
facet_wrap(~rep)
library(tidyverse)
mg <- read_csv("dados-diversos.csv")
library(tidyverse)
mg <- read_csv("dados-diversos.csv")
library(tidyverse)
mg <- read_csv("dados-diversos.csv")
library(tidyverse)
mg <- read_csv("dados-diversos.csv")
library(tidyverse)
mg <- read_csv("dados-diversos.csv")
library(tidyverse)
mg <- read_csv("dados-diversos.csv")
library(tidyverse)
mg <- read_csv("dados-diversos.csv")
library(tidyverse)
mg <- read_csv("dados-diversos.csv")
library(tidyverse)
mg <- read_csv("dados-diversos.csv")
mg |>
ggplot(aes(Irrigation, severity, shape = Irrigation))+
geom_point(alpha = 0.5)
library(tidyverse)
library(readxl)
fungicida <- read_excel("dados-diversos.xlsx",
"fungicida_campo")
###criar tabela (dataframe) com tratamento, eixo x, severidade, eixo y
fungicida |>
ggplot(aes(trat, yld)) +
###
geom_jitter(width = 0.1,
color = "gray60")+
###função para plotar média e erro padrão da média automaticamente, ponto de cor vermelha
stat_summary(fun.data = mean_se,
color = "red")
fungicida |>
ggplot(aes(sev, yld))+
geom_point( size = 3, color = "gray50")+
scale_color_colorblind()+
###coloca linha de tendência
geom_smooth(method = "lm",
se = FALSE,
color = "black",
linetype = "solid",
size = 1)
fungicida |>
ggplot(aes(sev, yld))+
geom_point( size = 3, color = "gray50")+
###coloca linha de tendência
geom_smooth(method = "lm",
se = FALSE,
color = "black",
linetype = "solid",
size = 1)
library(tidyverse)
library(readxl)
mofo <- read_excel("dados-diversos.xlsx","mofo")
mofo |>
ggplot(aes(treat, yld))+
geom_col()+
facet_wrap(~study)
mofo |>
ggplot(aes(treat, yld))+
geom_col()+
facet_wrap(~study)
library(tidyverse)
library(readxl)
mofo <- read_excel("dados-diversos.xlsx","mofo")
View(mofo)
mofo |>
ggplot(aes(treat, yld))+
geom_col()+
facet_wrap(~study)
h1 <- mofo |>
ggplot(aes(x = scl))+
geom_histogram(bins = 10)
i <- mofo |>
ggplot(aes(x = scl))+
geom_boxplot(bins = 10)
library (patchwork)
(h1 / i)
#média
mean (mofo$scl)
#para cada variável
summary(mofo)
#cria um novo conjunto, entra no mofo, então
mofo2 <- mofo |>
#cria a variável scl2, que é igual ao logarítimo (log) do número de escleródios (scl)
#mutate(scl2 = log(scl))
#cria a variável scl2, que é igual a raíz quadrada (sqrt) do número de escleródios (scl)
mutate(scl2 = sqrt(scl))
mofo2
h2 <- mofo2 |>
ggplot(aes(scl2))+
geom_histogram(bins = 10)
h2
h1 / h2
#cria um novo conjunto com a aba survey do arquivo dados-diversos
survey <- read_excel("dados-diversos.xlsx", "survey")
#entra no survey, então
survey |>
#filtra por estado
filter(state == "RS") |>
#conta a variável do maior para o menor por padrão
count(species, residue) |>
#reordena uma coluna, do menor para o maior (n), maior para menor (-n), nome da variável
arrange(species) |>
#seleciona linhas por posição
#slice(1:2) |>
#renomear coluna
rename(res = residue) |>
#cria nova variável segudo uma condição de uma variável anterior
mutate(n_class = case_when (
n < 30 ~ "baixa",
TRUE ~ "Alta"))
# criando o objeto insects
insects <- tbl_df(InsectSprays) |>
select(spray, count)
insects
library(readxl)
library(tidyverse)
micelial <- read_excel("dados-diversos.xlsx", "micelial")
head (micelial)
library(readxl)
library(tidyverse)
micelial <- read_excel("dados-diversos.xlsx", "micelial")
head (micelial)
micelial|>
ggplot(aes(especie, tcm)) +
geom_boxplot()
#Ajustar o modelo
# <- (atribuiu aov a aov1); ~ (em função de); aov (função ANOVA)
aov1 <- aov(tcm ~ especie, data = micelial)
summary(aov1)
#Não há efeito significativo de espécie P=0.117.
#Checar as premissas para verificar se o modelo está correto
library(performance)
check_heteroscedasticity(aov1)
#OK: Error variance appears to be homoscedastic (p = 0.175). Significa que as variâncias são homogeneas.
check_normality(aov1)
#OK: residuals appear as normally distributed (p = 0.074). Significa que a normalidade
library(DHARMa)
plot(simulateResiduals(aov1))
#Normalidade a direita e variância homogenea a esquerda
# teste de normalidade
hist(aov1$residuals)
qqnorm(aov1$residuals)
qqline(aov1$residuals)
shapiro.test(aov1$residuals)
# criando o objeto insects
insects <- tbl_df(InsectSprays) |>
select(spray, count)
insects
insects|>
ggplot(aes(spray, count)) +
geom_boxplot()
aov1 <- aov(count ~ spray, data = insects)
summary(aov1)
library(performance)
check_heteroscedasticity(aov1)
#OK: Error variance appears to be homoscedastic (p = 0.175). Significa que as variâncias não são homogeneas, p < 0.05.
# nesse caso, recomenda-se transformar os dados para atender as premissas e então utilizar a ANOVA. Se as transformações não atenderem a homocedasticidade, utilizar teste não paramétrico.
# alternativa 1: transformar dados originais, se for números. Usar raiz quadrada ou logaritimo
# sqrt:  raiz quadrada
# log: logarítimo. se houver valor zero no "count" somar 0.5.
aov2 <- aov(sqrt(count) ~ spray, data = insects)
#aov2 <- aov(log(count+0.5) ~ spray, data = insects)
summary(aov2)
check_heteroscedasticity(aov2)
check_normality(aov2)
# atenteu as premissas
library(emmeans)
# médias por inseticida
# type = "response": para que a média não seja transformada, o inverso da raiz
aov2_means <- emmeans(aov2, ~ spray, type = "response")
aov2_means
# comparação entre pares
pwpm(aov2_means)
# com letras
library(multcomp)
library(multcompView)
cld(aov2_means)
# teste não paramétrico, se não atendeu as premissas da ANOVA mesmo com transformção dos dados.
kruskal.test(count ~ spray, data = insects)
library(agricolae)
kruskal(insects$count, insects$spray, console = TRUE)
micelial|>
ggplot(aes(especie, tcm)) +
geom_boxplot()
library(readxl)
library(tidyverse)
micelial <- read_excel("dados-diversos.xlsx", "micelial")
head (micelial)
micelial|>
ggplot(aes(especie, tcm)) +
geom_boxplot()
micelial|>
ggplot(aes(especie, tcm)) +
geom_boxplot()
micelial|>
ggplot(aes(especie, tcm)) +
geom_boxplot()
library(readxl)
library(tidyverse)
micelial <- read_excel("dados-diversos.xlsx", "micelial")
head (micelial)
library(readxl)
library(tidyverse)
survey <- read_excel("dados-diversos.xlsx", "survey")
survey |>
count(year) # frequências de ocorrências por ano
survey |>
count(year) # frequências de ocorrências por ano
library(readxl)
library(tidyverse)
survey <- read_excel("dados-diversos.xlsx", "survey")
survey |>
count(year) # frequências de ocorrências por ano
library(tidyverse)
library(readxl)
survey <- read_excel("dados-diversos.xlsx",
"survey")
library(readxl)
library(tidyverse)
survey <- read_excel("dados-diversos.xlsx", "survey")
survey |>
# frequências de ocorrências por ano
count(year)
library(tidyverse)
library(dplyr)
library(readxl)
library(ggplot2)
library(janitor)
library(epifitter)
survey <- read_excel("dados-diversos.xlsx", "survey")
survey |>
# frequências de ocorrências por ano
count(year)
library(tidyverse)
library(dplyr)
library(readxl)
library(ggplot2)
library(janitor)
library(epifitter)
survey <- read_excel("dados-diversos.xlsx", "survey")
survey |>
# frequências de ocorrências por ano
count(year)
library(readxl)
library(tidyverse)
survey <- read_excel("dados-diversos.xlsx", "survey")
survey |>
# frequências de ocorrências por ano
count(year)
library(tidyverse)
library(readxl)
survey <- read_excel("dados-diversos.xlsx",
"survey")
library(tidyverse)
library(readxl)
survey <- read_excel("dados-diversos.xlsx",
"survey")
library(tidyverse)
library(readxl)
survey <- read_excel("dados-diversos.xlsx",
"survey")
library(tidyverse)
library(readxl)
survey <- read_excel("dados-diversos.xlsx",
"survey")
library(tidyverse)
library(readxl)
survey <- read_excel("dados-diversos.xlsx",
"survey")
survey <- read_excel("dados-diversos.xlsx", "survey")
library(readxl)
library(tidyverse)
library(readxl)
library(tidyverse)
library(readxl)
library(tidyverse)
survey <- read_excel("dados-diversos.xlsx", "survey")
survey |>
# frequências de ocorrências por ano
count(year)
# table é do R base e não do tidyverse
table (survey$year, survey$species) # em formato largo
library(janitor)
survey |>
tabyl(year, species) |> # dá o mesmo resultado do table, em formato largo
#adorn_percentages() # dá o vlaor em porcentagem
# gráfico de barras é indicado para visualizar frequências. O gráfico precisa ser no formato longo
survey |>
count(year, species) |> # dá o formato longo
ggplot(aes(year, n, fill = species))+
geom_col()
library(readxl)
library(tidyverse)
survey <- read_excel("dados-diversos.xlsx", "survey")
survey |>
# frequências de ocorrências por ano
count(year)
# table é do R base e não do tidyverse
table (survey$year, survey$species) # em formato largo
library(janitor)
survey |>
tabyl(year, species) |> # dá o mesmo resultado do table, em formato largo
#adorn_percentages() # dá o vlaor em porcentagem
# gráfico de barras é indicado para visualizar frequências. O gráfico precisa ser no formato longo
survey |>
count(year, species) |> # dá o formato longo
ggplot(aes(year, n, fill = species))+
geom_col()
library(readxl)
library(tidyverse)
survey <- read_excel("dados-diversos.xlsx", "survey")
survey |>
# frequências de ocorrências por ano
count(year)
library(readxl)
library(tidyverse)
survey <- read_excel("dados-diversos.xlsx", "survey")
survey |>
# frequências de ocorrências por ano
count(year)
library(readxl)
library(tidyverse)
survey <- read_excel("dados-diversos.xlsx", "survey")
survey |>
count(year)
library(readxl)
library(tidyverse)
survey <- read_excel("dados-diversos.xlsx", "survey")
survey |>
count(year)
library(readxl)
library(tidyverse)
survey <- read_excel("dados-diversos.xlsx", "survey")
survey |>
count(year)
library(readxl)
library(tidyverse)
survey <- read_excel("dados-diversos.xlsx", "survey")
survey |>
count(year)
# table é do R base e não do tidyverse
q <- table (survey$year, survey$species) # em formato largo
survey |>
count(year)
survey |>
count(year)
library(janitor)
survey |>
tabyl(year, species)
survey |>
tabyl(year, species) |> # dá o mesmo resultado do table, em formato largo
#adorn_percentages() # dá o valaor em porcentagem
survey
survey |>
tabyl(year, species) |> # dá o mesmo resultado do table, em formato largo
#adorn_percentages() # dá o valaor em porcentagem
survey
survey |>
tabyl(year, species) |> # dá o mesmo resultado do table, em formato largo
#adorn_percentages() # dá o valaor em porcentagem
survey
survey |>
tabyl(year, species) |> # dá o mesmo resultado do table, em formato largo
#adorn_percentages() # dá o valaor em porcentagem
survey
survey |>
tabyl(year, species) |> # dá o mesmo resultado do table, em formato largo
#adorn_percentages() # dá o valaor em porcentagem
survey
survey |>
tabyl(year, species) |> # dá o mesmo resultado do table, em formato largo
#adorn_percentages() # dá o valaor em porcentagem
survey
survey1 |>
tabyl(year, species) |> # dá o mesmo resultado do table, em formato largo
#adorn_percentages() # dá o valaor em porcentagem
survey1
library(janitor)
survey1 |>
tabyl(year, species) |> # dá o mesmo resultado do table, em formato largo
adorn_percentages() # dá o valaor em porcentagem
library(janitor)
survey |>
tabyl(year, species) |> # dá o mesmo resultado do table, em formato largo
#adorn_percentages() # dá o valaor em porcentagem
# gráfico de barras é indicado para visualizar frequências. O gráfico precisa ser no formato longo
survey |>
count(year, species) |> # dá o formato longo
ggplot(aes(year, n, fill = species))+
geom_col()
library(readxl)
library(tidyverse)
survey <- read_excel("dados-diversos.xlsx", "survey")
survey |>
count(year)
survey |>
count(year)
View(survey)
survey <- read_excel("dados-diversos.xlsx","survey")
survey |>
count(year)
survey <- read_excel("dados-diversos.xlsx", "survey")
library(readxl)
library(tidyverse)
survey <- read_excel("dados-diversos.xlsx", "survey")
library(readxl)
library(tidyverse)
survey <- read_excel("dados-diversos.xlsx", "survey")
survey |>
count(year) # table é do R base e não do tidyverse
shapiro.test(Mg2)
library(magrittr) # para usar pipes
library(ggplot2) # para gráficos
library(dplyr)
library(readxl)
library(tidyr)
data_mg <- read_excel("dados-diversos.xlsx")
head(data_mg)
data_mg %>%
ggplot(aes(trat, comp)) +
geom_boxplot(outlier.color = NA) +
geom_jitter(width = 0.1, shape = 1)
dat2 <- data_mg |>
group_by(trat) |>
summarise(
mean_comp = mean(comp),
sd_comp = sd(comp),
var_comp = var(comp),
n = n(),
se_comp = sd_comp / sqrt(n-1),
ci = se_comp * qt(0.025, df = 9)#intervalo de confiança
)
dat2
dat2 |>
ggplot(aes(trat, mean_comp))+
geom_col(width = 0.5, fill = "steelblue")+
geom_errorbar(aes(
ymin = mean_comp - ci,
ymax = mean_comp + ci), width = 0.1)+
ylim(0,20)+
labs(x = "", y = "Mean size (mm)")
data_mg2 <- data_mg |>
pivot_wider(1,
names_from = trat,
values_from = comp)
data_mg2
t.test(data_mg2$Mg2, data_mg2$Ctrl, paired = F)
attach(data_mg2) # vamos facilitar o uso dos vetores. Libera no ambiente os objetos
var.test(Mg2, Ctrl)
shapiro.test(Mg2)
shapiro.test(Ctrl)
qqnorm(Mg2)
qqline(Mg2)
qqnorm(Ctrl)
qqline(Ctrl)
escala <- read_excel("dados-diversos.xlsx", "escala")
head(escala)
escala2 <- escala |>
select(assessment, rater, acuracia)|>
pivot_wider(1,
names_from = assessment,
values_from = acuracia)
escala2
attach(escala2)
t_escala <- t.test(Aided1, Unaided,
paired = TRUE,
var.equal = FALSE) # Resultado:  há efeito da escala
var.test(Aided1,Unaided) # Homocedasticidade
shapiro.test(Aided1) # Normalidade. p-value maior que 0,05, então não rejeita H0, logo os valores são homogeneos.
shapiro.test(Unaided) # p-value maior que 0,05, então não rejeita H0, logo os valores são homogeneos.
library(report)
report(t_escala)
wilcox.test(Aided1, Unaided) # Teste não paramétrico equivalente ao teste t pareado. Utilizar esse teste se houvesse problemas com a normalidade e homocedaticidade.
escala |>
ggplot(aes(assessment, precisao)) +
geom_boxplot(outlier.color = NA)
library(tidyverse)
mg <- read_csv("dados-diversos.csv")
mg |>
# filter(rep == 3) |>
ggplot(aes(day, severity, shape = Irrigation))+
geom_point(alpha = 0.5)+
geom_line()+
facet_wrap(~rep)
library(tidyverse)
mg <- read_csv("dados-diversos.csv")
# Chunk 1
library(tidyverse)
mg <- read_csv("dados-diversos.csv")
library(tidyverse)
library(readxl)
library(ggplot2)
library(remotes)
remotes::install_github("emdelponte/r4pde")
